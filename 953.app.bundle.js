(()=>{"use strict";self.addEventListener("message",(({data:{number:t,algorithm:o}})=>{"trial-div v2"===o?function(t){const o=(o,a=t)=>"number"==typeof a?o:BigInt(o);let a=o(2);const e=[],i=[],n=performance.now();for(;t%a==0;)e.push(a.toString()),i.push(`${t} รท ${a}`),postMessage({facto:{default_factorization:e,detailed_factorization:i}}),t/=a;for(a=o(3);a*a<=t;)t%a==0?(e.push(a.toString()),i.push(`${t} รท ${a}`),postMessage({facto:{default_factorization:e,detailed_factorization:i}}),t/=a):a+=o(2);1!=t&&(e.push(t.toString()),i.push(`${t} รท ${t}`));const s=performance.now();postMessage({facto:{default_factorization:e,detailed_factorization:i,isPrime:1===e.length},about:s-n})}(t):function(t){let o=((o,a=t)=>"number"==typeof a?o:BigInt(o))(2);const a=[],e=[],i=performance.now();for(;t>1;)t%o==0?(a.push(o.toString()),e.push(`${t} รท ${o}`),postMessage({facto:{default_factorization:a,detailed_factorization:e}}),t/=o):o++;const n=performance.now();postMessage({facto:{default_factorization:a,detailed_factorization:e,isPrime:1===a.length},about:n-i})}(t)}))})();